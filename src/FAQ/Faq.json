{
  "General": [
    {
      "id": 1,
      "title": "How do I start coding with JavaScript?",
      "description": "To start coding with JavaScript, you can begin by learning the basics of the language through online tutorials or courses. Tools like code editors (e.g., Visual Studio Code) and browsers' developer tools will help you write and test your code."
    },
    {
      "id": 2,
      "title": "What platforms can I use to practice coding?",
      "description": "You can use various platforms to practice coding, such as Codecademy, freeCodeCamp, and LeetCode. These platforms offer interactive coding exercises and challenges to help you improve your skills."
    },
    {
      "id": 3,
      "title": "What are some basic JavaScript frameworks for beginners?",
      "description": "For beginners, starting with basic JavaScript frameworks like React or Vue.js is a good idea. These frameworks offer easy-to-follow documentation and tutorials to help you build interactive web applications."
    }
  ],
  "Newbie to Coding": [
    {
      "id": 4,
      "title": "What is the best way to learn `var`, `let`, and `const`?",
      "description": "To learn `var`, `let`, and `const`, you should start by understanding their basic differences in scope and reassignment. Practice using them in simple coding exercises to see how they behave in different scenarios."
    },
    {
      "id": 5,
      "title": "How can I write my first function in JavaScript?",
      "description": "To write your first function in JavaScript, define a function using the `function` keyword followed by the function name and parameters. For example: `function greet(name) { return 'Hello ' + name; }`. Call the function with a name to see the result."
    },
    {
      "id": 6,
      "title": "What are some common uses for variables in programming?",
      "description": "Variables in programming are used to store and manage data that can change during the execution of a program. Common uses include storing user inputs, counting items in a loop, or holding temporary values for calculations."
    }
  ],
  "Intermediate in Coding": [
    {
      "id": 7,
      "title": "How do I use array methods like `map`, `filter`, and `reduce`?",
      "description": "To use array methods like `map`, `filter`, and `reduce`, start by understanding their purposes: `map` transforms each item in an array, `filter` creates a new array with items that pass a test, and `reduce` accumulates values into a single result. Practice using these methods with simple arrays to get comfortable."
    },
    {
      "id": 8,
      "title": "What is the purpose of asynchronous programming in JavaScript?",
      "description": "Asynchronous programming allows you to perform tasks like fetching data from a server without stopping the execution of other code. Using `async` and `await`, or `then` with Promises, helps manage these tasks effectively."
    },
    {
      "id": 9,
      "title": "How can I create and manipulate arrays in JavaScript?",
      "description": "To create and manipulate arrays in JavaScript, use array literals (e.g., `let arr = [1, 2, 3];`) and methods like `.push()`, `.pop()`, and `.splice()` to modify the array. Practice these methods to become familiar with array operations."
    }
  ],
  "Domain Specific": [
    {
      "id": 10,
      "title": "What is a simple way to start working with RESTful APIs?",
      "description": "A simple way to start working with RESTful APIs is to use tools like Postman to send requests and view responses. Begin by experimenting with basic GET requests to understand how APIs work and how to interact with them."
    },
    {
      "id": 11,
      "title": "How can I get started with machine learning using supervised learning?",
      "description": "To get started with supervised learning, begin by exploring basic algorithms like linear regression or classification. Use beginner-friendly libraries such as Scikit-learn in Python to experiment with labeled datasets."
    },
    {
      "id": 12,
      "title": "What is a simple introduction to databases for web development?",
      "description": "A simple introduction to databases involves learning about basic database concepts and using SQL to interact with a relational database. Start by practicing basic queries like SELECT, INSERT, and UPDATE to manage data."
    }
  ],
  "Advanced Topics": [
    {
      "id": 13,
      "title": "What are closures and how can I use them in JavaScript?",
      "description": "Closures are functions that remember the variables from their containing scope even after the outer function has finished executing. Practice creating closures to understand how they can be used for data encapsulation and function factories."
    },
    {
      "id": 14,
      "title": "How can I start using React Hooks in my projects?",
      "description": "To start using React Hooks, begin with basic hooks like `useState` for managing state and `useEffect` for side effects. Read the official React documentation and follow tutorials to integrate hooks into functional components."
    },
    {
      "id": 15,
      "title": "What is a Promise in JavaScript and how do I use it?",
      "description": "A Promise in JavaScript represents the eventual completion or failure of an asynchronous operation. Start by creating and handling Promises using `.then()` for success and `.catch()` for errors to manage asynchronous code more effectively."
    }
  ],
  "DevOps": [
    {
      "id": 16,
      "title": "What is Continuous Integration (CI) and how can I start using it?",
      "description": "Continuous Integration (CI) is a practice where code changes are automatically tested and integrated into the main codebase. Start by setting up a CI tool like GitHub Actions or Travis CI to automate your testing and build processes."
    },
    {
      "id": 17,
      "title": "What is Docker and how can I use it for deployment?",
      "description": "Docker is a platform that helps package applications and their dependencies into containers. Begin by learning Docker basics, creating Dockerfiles, and running containers to understand how it simplifies application deployment."
    },
    {
      "id": 18,
      "title": "What is version control and how can I start using Git?",
      "description": "Version control is a system that tracks changes to your code. Start using Git by learning basic commands like `git init`, `git add`, `git commit`, and `git push` to manage and collaborate on your code efficiently."
    }
  ],
  "Security": [
    {
      "id": 19,
      "title": "What is Cross-Site Scripting (XSS) and how can I protect my website?",
      "description": "Cross-Site Scripting (XSS) is a vulnerability where attackers inject malicious scripts into a website. Protect your website by validating and sanitizing user inputs and implementing Content Security Policy (CSP)."
    },
    {
      "id": 20,
      "title": "What are the basics of managing passwords securely?",
      "description": "Basics of managing passwords securely include using strong, unique passwords for different accounts, storing them using password managers, and enabling multi-factor authentication (MFA) for added security."
    },
    {
      "id": 21,
      "title": "What is HTTPS and how does it secure a website?",
      "description": "HTTPS (HyperText Transfer Protocol Secure) uses encryption to secure data transmitted between the user's browser and the web server. Ensure your website uses HTTPS to protect sensitive information and maintain user trust."
    }
  ],
  "Performance Optimization": [
    {
      "id": 22,
      "title": "What is lazy loading and how can it help my website’s performance?",
      "description": "Lazy loading delays loading non-critical resources until they are needed. Implement lazy loading for images and other assets to improve initial load time and enhance your website’s performance."
    },
    {
      "id": 23,
      "title": "What is memoization and how can it improve function performance?",
      "description": "Memoization is a technique to cache the results of expensive function calls. Use memoization to store results of function calls with the same inputs, reducing computation time and improving performance."
    },
    {
      "id": 24,
      "title": "How can I optimize images for faster web performance?",
      "description": "To optimize images for faster web performance, compress and resize images before uploading. Use tools or libraries to automate image optimization and serve images in modern formats like WebP for better performance."
    }
  ]
}
